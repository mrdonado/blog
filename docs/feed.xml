<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="https://blog.jdonado.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://blog.jdonado.com/" rel="alternate" type="text/html" /><updated>2021-10-31T23:40:30+01:00</updated><id>https://blog.jdonado.com/feed.xml</id><title type="html">JDonado’s README</title><subtitle>Coding in English, thinking in Spanish, living in Germany</subtitle><author><name>F. Javier R. Donado</name><email>jdonado@jdonado.com</email><uri>https://www.jdonado.com</uri></author><entry><title type="html">The Yin and Yang of Software Development</title><link href="https://blog.jdonado.com/yin-and-yang/" rel="alternate" type="text/html" title="The Yin and Yang of Software Development" /><published>2021-06-05T00:00:00+02:00</published><updated>2021-06-05T00:00:00+02:00</updated><id>https://blog.jdonado.com/yin-and-yang</id><content type="html" xml:base="https://blog.jdonado.com/yin-and-yang/">&lt;h2 id=&quot;what-is-software-development-all-about&quot;&gt;What Is Software Development All About?&lt;/h2&gt;

&lt;p&gt;Depending on who you ask, even when asking professionals that have been many years in the industry, you’ll get very different answers. In my experience, there are two clear trends:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Software Development is a craft&lt;/strong&gt;. Your job as a software developer is similar in many ways to the job of a gardener. You don’t have a big plan because you don’t need one. You’re starting small, you’re alone and you’re building things along the way. If you’re a good gardener, however, you’ll be clean and you’ll pay attention to the tricky parts of your garden because you know that unless you keep them under control, they’ll soon get out of hand.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Software Development is an Engineering discipline&lt;/strong&gt;. Now there’s a plan. You have one or even various teams, and you’re building something big and complex for which there are clear requirements and constraints. There’s a need for a well-defined architecture, as well as processes that ensure the &lt;strong&gt;quality requirements&lt;/strong&gt;. &lt;a href=&quot;https://en.wikipedia.org/wiki/Agile_software_development&quot;&gt;Agile methodologies&lt;/a&gt; might let you delay part of the decision-making, but you cannot sacrifice quality.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You might call it the &lt;em&gt;Yin and Yang of Software Development&lt;/em&gt;. I think that both statements are true to some extent, but one might rule over the other depending on the context.&lt;/p&gt;

&lt;p&gt;There’s almost always some craft or even some art in the process of software development. When you’re writing code, more often than not you’re not following a scientifically rigorous method. Instead of that, you rely on pre-existing components and on your experience to build things that work. If you need metrics, these metrics usually come after you’ve already built something. However, depending on the context, you might need to apply engineering processes and quality standards that resemble those used in other engineering disciplines.&lt;/p&gt;

&lt;p&gt;These two definitions raise two new questions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;In which context will one definition rule over the other?&lt;/li&gt;
  &lt;li&gt;What is quality in software?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;business-is-the-context&quot;&gt;Business Is the Context&lt;/h2&gt;

&lt;p&gt;When you build software in the context of a startup that is creating a new product from scratch, there are usually so many unknown factors about the final product that it often makes little sense to apply most software quality measures.&lt;/p&gt;

&lt;p&gt;If you follow &lt;a href=&quot;https://www.thoughtworks.com/books/understanding-design-thinking-lean-agile-jonny-schneider&quot;&gt;Design Thinking, Lean and Agile&lt;/a&gt; principles, you’ll continuously perform experiments and collect data to test your hypotheses. This way, on each iteration you gain more insights about the right direction for your product.&lt;/p&gt;

&lt;p&gt;Usually, during the initial iterations, you’ll have a pretty small team (maybe just one developer), and the advantages of applying software quality principles might not be too clear because oftentimes the code that you’re writing won’t live very long.&lt;/p&gt;

&lt;p&gt;As Johnny Schneider explains in &lt;a href=&quot;https://www.goodreads.com/en/book/show/35784015&quot;&gt;Understanding Design Thinking, Lean and Agile&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;[…] Much of this experimentation might not involve writing a line of code—after all, &lt;strong&gt;working software is still an experiment, just a really expensive one&lt;/strong&gt;. As confidence increases and software is the experiment, Agile is how teams constantly adapt to change, repeatedly adjusting their course and taking the next steps&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Therefore, during the initial phases of a startup, you should better spend your time experimenting and collecting data about your experiments to continue taking well-informed decisions. You can interpret this as a technical variant of Paul Graham’s &lt;a href=&quot;http://paulgraham.com/ds.html&quot;&gt;“Do things that don’t scale”&lt;/a&gt;. What is the advantage of writing a high-quality scalable solution if you end up throwing it all away?&lt;/p&gt;

&lt;p&gt;Some developers would be horrified to even think about developing software like that. That’s because they don’t see software development as a craft nor as an Engineering discipline, &lt;em&gt;but as a religion&lt;/em&gt;. Good developers see the value in software quality techniques, but they can also see the big picture and the cost of &lt;a href=&quot;https://en.wikipedia.org/wiki/Non-functional_requirement&quot;&gt;non-functional requirements&lt;/a&gt;, especially in the beginning. If you don’t see this, you might end up with an overengineered solution, that is difficult to maintain and poorly addresses the business needs.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;The problem with the context, however, &lt;strong&gt;is that it changes over time&lt;/strong&gt;. You might’ve started it all as a bunch of experiments, but at some point, if enough of these experiments were successful, you’ll find yourself offering a real service to real customers.&lt;/p&gt;

&lt;p&gt;A good CTO in a startup will constantly try to answer this question: &lt;strong&gt;“how much technical debt can we afford?”&lt;/strong&gt;. In the beginning, we need speed over anything else, because we cannot afford to take too long when trying out our experiments. Otherwise, we’ll run out of time and resources and our competition will kick us out before we’ve even started.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.devgenius.io/quality-vs-speed-9a46a6254a4e&quot;&gt;But there’s an inflection point&lt;/a&gt; where the velocity (that is, the development speed of new features) will dramatically decrease if you don’t improve the quality of your software. It’s difficult to tell when exactly this inflection point occurs for a given product, but some indicators are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Your codebase is growing a lot and more people start working on it.&lt;/li&gt;
  &lt;li&gt;You start spending more time than usual fixing bugs.&lt;/li&gt;
  &lt;li&gt;New developers find it increasingly difficult to start being productive.&lt;/li&gt;
  &lt;li&gt;You need an increasing amount of time to manually test your product on each release.&lt;/li&gt;
  &lt;li&gt;Your customers start complaining about the quality of the service.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://blog.jdonado.com/assets/images/speed-time-chart.png&quot; alt=&quot;Development speed vs. time since project start&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The team and its stakeholders should realize that the ludicrous speed of the initial phases is not sustainable over time. At some point, enough resources should be spent to continuously refactor the codebase before it’s too late. If the goal is to achieve the highest development speed possible, there’s a moment where software quality principles stop being an obstacle and become a crucial part of &lt;a href=&quot;https://www.youtube.com/watch?v=ZmgbjaRfp_Q&quot;&gt;a virtuous circle&lt;/a&gt; where you build better software, faster. In other words, if you don’t care about the quality of your software soon enough, it’s a matter of time that it’ll become unmaintainable, and that will slow you down.&lt;/p&gt;

&lt;h3 id=&quot;product-development-stages&quot;&gt;Product Development Stages&lt;/h3&gt;

&lt;p&gt;During product development, it’s quite common to use the following terms:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Proof_of_concept&quot;&gt;PoC (Proof of Concept)&lt;/a&gt;: it’s the minimal solution to see if some idea is even feasible. It’s the cheapest way to test a hypothesis.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Prototype&quot;&gt;Prototype&lt;/a&gt;: it’s a piece of working software that solves a specific problem. It might have a beautiful design and it might seem to be robust, but it doesn’t follow most software development best practices and quality standards. It’s a good way to test a hypothesis, but it’s not maintainable in the long term. Some authors use the term “walking skeleton” for this.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Minimum_viable_product&quot;&gt;MVP (Minimum Viable Product)&lt;/a&gt;: it’s a product built on a solid technical base that offers the minimum set of desired features. The goal of an MVP is to hit the market as soon as possible while having a solid starting point that is maintainable in the long term.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After the MVP phase, you might want to continue iterating into a Minimum Marketable Product, a Minimum Lovable Product, a Minimum Delightful Product…&lt;/p&gt;

&lt;p&gt;In my personal experience, most problems during product development these days have to do with misunderstandings about where you are with your product from a technical and from a business perspective. It’s the team members’ responsibility to communicate where you are at a given moment and understand what it means.&lt;/p&gt;

&lt;h2 id=&quot;quality-software&quot;&gt;Quality Software&lt;/h2&gt;

&lt;p&gt;I won’t describe in depth what software quality is all about. &lt;a href=&quot;https://en.wikibooks.org/wiki/Introduction_to_Software_Engineering/Quality&quot;&gt;There’s an article in Wikipedia&lt;/a&gt; that defines it pretty well.&lt;/p&gt;

&lt;p&gt;In a nutshell, in the context of a startup, quality software means:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Follow best practices.
    &lt;ul&gt;
      &lt;li&gt;From code style guides to DRY, KISS, SOLID principles, etc.&lt;/li&gt;
      &lt;li&gt;Continuously refactor your code.&lt;/li&gt;
      &lt;li&gt;Automatically analyze the complexity of your code.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Write tests.
    &lt;ul&gt;
      &lt;li&gt;Not just unit tests, but all kinds of tests. Tests will help you keep your solution stable and maintainable. Read &lt;a href=&quot;https://martinfowler.com/articles/practical-test-pyramid.html&quot;&gt;the practical test pyramid&lt;/a&gt; for more information about it.&lt;/li&gt;
      &lt;li&gt;Without tests the chances that new features break existing ones without you realizing it are ever-increasing.&lt;/li&gt;
      &lt;li&gt;Tests also work as documentation for new team members.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Do code reviews.&lt;/li&gt;
  &lt;li&gt;Use continuous delivery pipelines.&lt;/li&gt;
  &lt;li&gt;Design a scalable architecture.
    &lt;ul&gt;
      &lt;li&gt;Monitor your systems and identify failures and bottlenecks.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Doing this takes time, but it’s an investment. I wouldn’t recommend doing it all while the chances are high that you’ll end up throwing away most of your code, but as time goes by, you should better spend more and more time doing it if you don’t want to end up with a spaghetti code salad that nobody wants to work with.&lt;/p&gt;

&lt;p&gt;The later that you start applying these principles, the most difficult (and expensive) it’s going to be to apply them successfully.&lt;/p&gt;

&lt;h2 id=&quot;some-final-words&quot;&gt;Some Final Words&lt;/h2&gt;

&lt;p&gt;Maybe you’ve always worked in an environment where quality software is valued and that’s why you’re probably almost religious when it comes to writing software with high-quality standards. Hopefully, you see now that there are cases where it’s in fact better to go the quick &amp;amp; dirty way for a while and activate the feature factory mode.&lt;/p&gt;

&lt;p&gt;Feature factory and quick &amp;amp; dirty have a price though, I hope that’s a bit clearer now. It’s tempting to try to extend that unnatural velocity peak as much as you can, but you’re playing with fire here. I’ve seen again and again companies that followed down that road, only to end up with buggy software and developer scarcity, because nobody wants to feel the pain of working with such a codebase in such conditions. If you’re in a team that won’t understand that whatever worked yesterday won’t work today anymore, I’d suggest avoiding quick &amp;amp; dirty altogether.&lt;/p&gt;

&lt;p&gt;Then there’s the ghost of a big rewrite. I would avoid rewriting unless it’s strictly necessary because it’s crazy expensive. If you extend the quick &amp;amp; dirty phase for too long, however, sooner or later there’ll be no other choice.&lt;/p&gt;</content><author><name>F. Javier R. Donado</name><email>jdonado@jdonado.com</email><uri>https://www.jdonado.com</uri></author><category term="software-quality startup product-development" /><category term="software-quality" /><category term="startup" /><category term="product-development" /><summary type="html">What Is Software Development All About?</summary></entry><entry><title type="html">The Infancy of the Cloud</title><link href="https://blog.jdonado.com/cloud-infancy/" rel="alternate" type="text/html" title="The Infancy of the Cloud" /><published>2020-05-10T00:00:00+02:00</published><updated>2020-05-10T00:00:00+02:00</updated><id>https://blog.jdonado.com/cloud-infancy</id><content type="html" xml:base="https://blog.jdonado.com/cloud-infancy/">&lt;h2 id=&quot;the-heterogeneous-world-of-it-job-titles&quot;&gt;The Heterogeneous World of IT Job Titles&lt;/h2&gt;

&lt;p&gt;When I started working in the IT industry, one of the things that shocked me a bit was the way job titles were used. I guess that as an undergrad, you often expect some correlation between training or a study plan and whatever position or role you play in a company. Yes, that was naive from me, I admit it. Then, the creativity some people exercised when describing their job took me by surprise. Whoever has jumped through enough LinkedIn profiles will know what I’m talking about.&lt;/p&gt;

&lt;p&gt;I don’t want to rant about made-up or senseless occupations here, however. What I want to talk about is a specific position that on the surface makes all the sense in the world, just not to me, not yet.&lt;/p&gt;

&lt;h2 id=&quot;the-cloud-expert&quot;&gt;The Cloud Expert&lt;/h2&gt;

&lt;p&gt;The cloud has become an important area for IT professionals. If you don’t know anything about the cloud you’ll be left behind. Most of you will remember how some years ago, in 2006 Amazon released AWS and the cloud phenomenon started taking off. Some people used to joke that&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“It was never the cloud, it was always someone else’s computer.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And yes, that is more or less what it looked like at the beginning. But then it started evolving. First, the continuous additions to the AWS products landscape, together with Microsoft Azure’s, Google’s, and IBM’s counterparts. Then &lt;a href=&quot;https://en.wikipedia.org/wiki/Cloud_Foundry&quot;&gt;Pivotal’s CloudFoundry&lt;/a&gt; and &lt;a href=&quot;https://aws.amazon.com/blogs/aws/category/management-tools/aws-cloudformation/&quot;&gt;AWS CloudFormation&lt;/a&gt; in 2011, &lt;a href=&quot;https://en.wikipedia.org/wiki/Docker_(software)&quot;&gt;Docker containers&lt;/a&gt; in 2013, Google’s &lt;a href=&quot;https://en.wikipedia.org/wiki/Kubernetes&quot;&gt;Kubernetes&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/AWS_Lambda&quot;&gt;AWS Lambda&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Terraform_(software)&quot;&gt;HashiCorp’s Terraform&lt;/a&gt; in 2014… just to name a few.&lt;/p&gt;

&lt;p&gt;It’s 2020 and we &lt;strong&gt;need&lt;/strong&gt; cloud experts. However IMHO &lt;strong&gt;nobody out there is a cloud expert&lt;/strong&gt;. Not yet. I’m afraid that we didn’t have time to digest it all, there’s no standardization, no clear best practices and, still worse, it has not stopped evolving. And it doesn’t look like it will stop evolving any time soon.&lt;/p&gt;

&lt;p&gt;Yes, you might have attended countless conferences as a speaker talking about cloud technologies and you might have world-class expertise about the cloud. Or maybe, you’ve been using Kubernetes since 2014 and sure, that will make you an expert on that particular technology.&lt;/p&gt;

&lt;p&gt;But do you have any certainty about the &lt;em&gt;near&lt;/em&gt; future of the cloud? Can you do something complex today that will still follow what will be considered best practices in 5 years? I seriously doubt it (just look at how we were doing things five years ago).&lt;/p&gt;

&lt;h2 id=&quot;is-it-a-bad-thing-what-can-we-do&quot;&gt;Is It a Bad Thing? What Can We Do?&lt;/h2&gt;

&lt;p&gt;I think that it’s something quite common in IT, as well as in any other branch where things are evolving so fast, and it has pros and cons. On one hand, for us professionals in the field, it’s exciting to experience this evolution in first person. On the other hand, it sure creates a lot of noise and fatigue, and you never know which technologies or techniques will stay relevant a couple of years from now.&lt;/p&gt;

&lt;p&gt;There is however one thing you can do when starting a new project or when taking architectural decisions on existing projects on the cloud, and it is to &lt;strong&gt;forget for a moment how big of an expert you are&lt;/strong&gt;, try to adopt &lt;a href=&quot;https://www.creativehuddle.co.uk/how-to-adopt-a-beginners-mindset&quot;&gt;a beginners mindset&lt;/a&gt;, and follow the golden rule of the software development craft: &lt;a href=&quot;https://en.wikipedia.org/wiki/KISS_principle&quot;&gt;the Keep It Simple, Stupid (KISS™) principle&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The cloud came to help us, it’s not there for us to overengineer our solutions or to take the &lt;a href=&quot;http://radar.oreilly.com/2014/10/resume-driven-development.html&quot;&gt;Resume Driven Development&lt;/a&gt; road. Things tend to get complicated by themselves and it’s our responsibility to do our best to keep them as simple as possible.&lt;/p&gt;

&lt;p&gt;Some of the clear benefits of the cloud are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You don’t have to buy or manage hardware yourself.&lt;/li&gt;
  &lt;li&gt;It &lt;em&gt;should&lt;/em&gt; be cheaper.&lt;/li&gt;
  &lt;li&gt;Software updates are managed or simplified.&lt;/li&gt;
  &lt;li&gt;It offers a fast and reliable service (typically 99.9% availability).&lt;/li&gt;
  &lt;li&gt;It makes it easier to write software that scales (although if you’re a startup, chances are that &lt;a href=&quot;http://paulgraham.com/ds.html&quot;&gt;you shouldn’t have to worry much about that&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you misuse the tools that the cloud offers you, however, you can easily ruin its associated benefits, even creating brand new categories of problems. Here are some &lt;strong&gt;common problems&lt;/strong&gt; that I’ve experienced when working on legacy projects on the cloud:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Using too many resources on the cloud can be &lt;em&gt;very&lt;/em&gt; expensive.&lt;/li&gt;
  &lt;li&gt;It’s often the case that you cannot easily set-up a development environment on your local machine because there are too many dependencies on cloud components. You should try to avoid this early on in the project or things will quickly get out of hand, making life hard for you and still worse for newer members of your team.&lt;/li&gt;
  &lt;li&gt;Sometimes unit tests depend on existing infrastructure (this is a big red flag).&lt;/li&gt;
  &lt;li&gt;No appropriate monitoring and tracing mechanisms have been set up in order to find out exactly what happened when something went wrong.&lt;/li&gt;
  &lt;li&gt;It’s easy to overcomplicate things when trying to apply architectural patterns like microservices or an event-oriented architecture. Sure, using patterns and tools for the sake of using them has always been an anti-pattern, but the cloud can take it to a whole new level. If there are too many components, it gets more difficult than ever to get a clear picture of what’s going on and documentation tends to stay out of date.&lt;/li&gt;
  &lt;li&gt;If there’s no deployment automation from the beginning (Infrastructure as Code), chances are that you’re going to regret it.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;if-you-really-are-an-expert-youll-be-humble&quot;&gt;If You &lt;em&gt;Really&lt;/em&gt; Are an Expert, You’ll Be Humble&lt;/h2&gt;

&lt;p&gt;As Bret Victor pointed out in his talk about &lt;a href=&quot;https://www.youtube.com/watch?v=8pTEmbeENF4&quot;&gt;the Future of Programming&lt;/a&gt;, the community of IT professionals is (sadly) still digesting ideas that were first formulated during the 60s and 70s.&lt;/p&gt;

&lt;p&gt;A good example of that is the renewed interest in Functional Programming and how mainstream Object-Oriented languages like Java, C#, and C++ have recently incorporated FP concepts that were already available in LISP, first specified in 1958.&lt;/p&gt;

&lt;p&gt;We simply didn’t have enough time to define best practices for the cloud yet. Since you cannot know the best practices of the future, try to keep things as simple as possible today, because chances are, you’re going to need to rewrite parts of your code in the coming years. The less code you have today, the easier it will be to modify it tomorrow.&lt;/p&gt;

&lt;p&gt;Also, your team will be grateful if you do your best to keep documentation up to date. Using tools like Terraform, CDK, or Pulumi we can write Infrastructure as Code (IaC). That serves a double purpose: it lets us deploy and manage our cloud resources automatically, while also providing an up-to-date documentation of your infrastructure.&lt;/p&gt;

&lt;p&gt;What will come next? A tool that generates up-to-date diagrams using our IaC? A WYSIWYG editor for the cloud? At this pace, we’ll see it pretty soon.&lt;/p&gt;</content><author><name>F. Javier R. Donado</name><email>jdonado@jdonado.com</email><uri>https://www.jdonado.com</uri></author><category term="cloud aws kubernetes cloudfoundry" /><category term="cloud" /><category term="aws" /><category term="kubernetes" /><category term="cloudfoundry" /><summary type="html">The Heterogeneous World of IT Job Titles</summary></entry><entry><title type="html">Self-hosting behind a NAT</title><link href="https://blog.jdonado.com/behind-a-nat/" rel="alternate" type="text/html" title="Self-hosting behind a NAT" /><published>2019-11-16T00:00:00+01:00</published><updated>2019-11-16T00:00:00+01:00</updated><id>https://blog.jdonado.com/behind-a-nat</id><content type="html" xml:base="https://blog.jdonado.com/behind-a-nat/">&lt;blockquote&gt;
  &lt;p&gt;No one knows what it’s like to be a bad man, to be a sad man… behind a NAT&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Said &lt;a href=&quot;https://www.youtube.com/watch?v=dMrImMedYRo&quot;&gt;a famous song&lt;/a&gt; (more or less…)&lt;/p&gt;

&lt;h1 id=&quot;you-might-be-behind-a-nat-too&quot;&gt;You might be behind a NAT too&lt;/h1&gt;

&lt;p&gt;It’s been years now since the times where you would get a static IPv4 address assigned to your home together with your internet access. An address that you could use to ping your home router from anywhere in the world. Now you’re lucky if you’re even offered the option of paying an extra fee to get one. Sometimes not even a business contract will give you that.&lt;/p&gt;

&lt;p&gt;Now, most of the time, your home or small business router will only be reachable on an &lt;a href=&quot;https://en.wikipedia.org/wiki/IPv6&quot;&gt;IPv6&lt;/a&gt; address. In some cases your &lt;a href=&quot;https://en.wikipedia.org/wiki/Internet_service_provider&quot;&gt;ISP&lt;/a&gt; might be using something like &lt;a href=&quot;https://www.citrix.com/blogs/2012/03/22/ds-lite-%E2%80%93-ipv4-over-ipv6-and-nat/&quot;&gt;DS-Lite&lt;/a&gt;, which puts you behind a &lt;a href=&quot;https://en.wikipedia.org/wiki/Network_address_translation&quot;&gt;NAT (Network Address Translation)&lt;/a&gt; protocol, making it very difficult for you to &lt;a href=&quot;https://en.wikipedia.org/wiki/Self-hosting_(web_services)&quot;&gt;self-host&lt;/a&gt; anything at home.&lt;/p&gt;

&lt;h2 id=&quot;but-why&quot;&gt;But… why??&lt;/h2&gt;

&lt;p&gt;There’s just &lt;a href=&quot;https://en.wikipedia.org/wiki/IPv4_address_exhaustion&quot;&gt;not enough IPv4 addresses&lt;/a&gt; for all of us, and although &lt;strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/IPv6&quot;&gt;IPv6&lt;/a&gt; is the solution&lt;/strong&gt; (and although it’s been around since 1998…), &lt;a href=&quot;https://www.google.com/intl/en/ipv6/statistics.html#tab=ipv6-adoption&quot;&gt;adoption is still slow&lt;/a&gt;. Chances are if your server is only available under an IPv6 address, most people out there won’t be able to reach you. You still need an IPv4 address for people to be able to find you on the internet in 2019. &lt;strong&gt;Sadly&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;So if you want to be able to &lt;strong&gt;self-host&lt;/strong&gt; anything at home you need some kind of workaround. A &lt;a href=&quot;https://en.wikipedia.org/wiki/Dynamic_DNS&quot;&gt;dynamic DNS&lt;/a&gt; is probably the most popular option (one that supports IPv6), but depending on your ISP’s setup, that might not work for you either. So, what other options do we have?&lt;/p&gt;

&lt;h2 id=&quot;wait-a-minute-we-have-the-cloud-now-why-should-i-bother-about-self-hosting-at-all&quot;&gt;Wait a minute, we have the cloud now! Why should I bother about self-hosting at all?&lt;/h2&gt;

&lt;p&gt;True. I wouldn’t recommend self-hosting at home for anything other than experimenting with software for your personal use. I wouldn’t even self-host at home my personal website.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;BUT&lt;/strong&gt; there are just &lt;a href=&quot;https://github.com/awesome-selfhosted/awesome-selfhosted/blob/master/README.md&quot;&gt;so many awesome things that you can self-host&lt;/a&gt; for your personal use… here are some examples:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You can have your own &lt;a href=&quot;https://filebrowser.xyz/&quot;&gt;alternative to Dropbox or Google Drive&lt;/a&gt;. Just buy a cheap 8TB hard drive and forget about paying monthly fees for getting as much online storage as you want.&lt;/li&gt;
  &lt;li&gt;You can use &lt;a href=&quot;https://www.mstream.io/&quot;&gt;mStream&lt;/a&gt; or &lt;a href=&quot;https://koel.phanan.net/&quot;&gt;Koel&lt;/a&gt; as an alternative to a music streaming service (Spotify, Deezer, Apple Music…). If you happen to have an mp3 collection from the days where an iPod was a cool gadget you might as well have been missing it! It’s time to give it a second chance.&lt;/li&gt;
  &lt;li&gt;The same idea applied to Netflix: &lt;a href=&quot;https://github.com/streamaserver/streama&quot;&gt;Streama&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Who wants to upload photos to Flickr when you have &lt;a href=&quot;https://lycheeorg.github.io/&quot;&gt;Lychee&lt;/a&gt; 😄&lt;/li&gt;
  &lt;li&gt;You can even set up your own &lt;a href=&quot;https://medium.com/nycdev/k8s-on-pi-9cc14843d43&quot;&gt;Kubernetes cluster&lt;/a&gt; using Raspberry PIs. Hours of entertainment await you with that.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;okay-youve-convinced-me-im-behind-a-nat-and-i-want-your-magic-solution&quot;&gt;Okay, you’ve convinced me, I’m behind a NAT and I want your magic solution!&lt;/h2&gt;

&lt;p&gt;Now we’re talking! If you want to self-host stuff at home and you happen to be behind a NAT; if for whatever reason a dynamic DNS doesn’t work for you, &lt;strong&gt;you can always SETUP A REVERSE PROXY&lt;/strong&gt; ⚡️⚡️⚡️⛈.&lt;/p&gt;

&lt;p&gt;The catch here is that you need access to a machine that is already reachable under an IPv4 address. If you’re reading this, you probably have one. If you don’t have it yet, you can get one for &lt;a href=&quot;https://www.vpsag.com/&quot;&gt;3€ a month&lt;/a&gt;, and use it not just as a portal for your self-hosted stuff, but for hosting anything that doesn’t require a lot of processing power (that’s where I host this blog and all my side project’s pages). Some other popular options are &lt;a href=&quot;https://www.digitalocean.com/&quot;&gt;Digital Ocean&lt;/a&gt; or &lt;a href=&quot;https://aws.amazon.com/ec2/&quot;&gt;AWS EC2&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You also need a machine (or more!) that is always running at home, where you’ll run the stuff that you want to self-host. An old laptop will do. You just install there whatever Linux distro you like the best and you’re good to go.&lt;/p&gt;

&lt;p&gt;Take a look at mine, isn’t it beautiful?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://blog.jdonado.com/assets/images/laptop.jpeg&quot; alt=&quot;laptop for self-hosting&quot; title=&quot;My good'ol Thinkpad&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A Raspberry PI will do the trick too.&lt;/p&gt;

&lt;h2 id=&quot;setup-a-reverse-proxy&quot;&gt;Setup a Reverse Proxy&lt;/h2&gt;

&lt;p&gt;I’m taking for granted that you already have something on that laptop that you want to see online from an IPv4 address. Something that you can visit locally as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://localhost:8080&lt;/code&gt; or similar.&lt;/p&gt;

&lt;p&gt;You also have an online server, which is reachable on an IPv4 address, like this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;216.58.213.196&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;First, &lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-ubuntu-18-04&quot;&gt;install NGINX&lt;/a&gt; on your server. Once you’re ready, you should be able to visit the default NGINX initial page on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://[YOURONLINEIP:80]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now you can establish an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SSH&lt;/code&gt; tunnel between your laptop at home and your server. A tunnel with a reverse proxy where your local port (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8080&lt;/code&gt; in the example) is mapped to some other port of your server (e.g.: port &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;17899&lt;/code&gt;). To achieve this, use this command:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh -N -g -R 17899:localhost:8080 yourusername@[YOURONLINEIP]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;While this tunnel is active, edit the NGINX configuration of your server with the following lines:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-nginxconfig&quot;&gt;
http {

  upstream backend-home {
    server 0.0.0.0:17899;
  }

  server {
    listen 80 default_server;
    listen [::]:80 default_server;
    server_name _;
    return 301 https://$host$request_uri;

    location / {
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_pass_request_headers on;
      proxy_pass http://backend-home;
    }
  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Restart NGINX on your server:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo systemctl restart nginx&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now you should be able to visit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://[YOURONLINEIP:80]&lt;/code&gt; and see whatever you have on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localhost:8080&lt;/code&gt; of your laptop at home. ISN’T IT GREAT!!???&lt;/p&gt;

&lt;h2 id=&quot;some-considerations&quot;&gt;Some Considerations&lt;/h2&gt;

&lt;p&gt;If you want that connection to always be active, you’ll need to follow a couple of steps more. Otherwise, the tunnel will be closed after a while and the magic will be gone.&lt;/p&gt;

&lt;p&gt;To do that, you need to first configure an SSH Key-Based Authentication to establish an SSH connection with the remote machine &lt;strong&gt;without a password&lt;/strong&gt;. &lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-configure-ssh-key-based-authentication-on-a-linux-server&quot;&gt;Here’s a very easy tutorial&lt;/a&gt; that explains how to do it.&lt;/p&gt;

&lt;p&gt;Once you can connect from your laptop to the remote machine via SSH without entering a password, you need a service that establishes that connection and keeps it alive.&lt;/p&gt;

&lt;p&gt;A rather simple and reliable way is by defining a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;systemd&lt;/code&gt; service on your laptop. To do that, edit a new file called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sshtunnel.service&lt;/code&gt; on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/systemd/system/&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo vim /etc/systemd/system/sshtunnel.service&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And add the following contents:&lt;/p&gt;

&lt;div class=&quot;language-systemd highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;[Unit]&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;Description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;SSH Tunnel
&lt;span class=&quot;nt&quot;&gt;After&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;network.target

&lt;span class=&quot;k&quot;&gt;[Service]&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;Restart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;always
&lt;span class=&quot;nt&quot;&gt;RestartSec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;20
&lt;span class=&quot;nt&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;[YOURLAPTOPUSER]
&lt;span class=&quot;nt&quot;&gt;ExecStart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;/usr/bin/ssh -N -g -R 17899:localhost:8080 yourusername@[YOURONLINEIP]

&lt;span class=&quot;k&quot;&gt;[Install]&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;WantedBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;multi-user.target
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then run the following commands:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shscript&quot;&gt;sudo systemctl enable sshtunnel
sudo systemctl start sshtunnel
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first command will tell your system to run the service on startup. The second one (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;start&lt;/code&gt;) will start the service right away.&lt;/p&gt;

&lt;p&gt;Note: there are alternatives to creating your custom ssh service (e.g.: &lt;a href=&quot;https://linux.die.net/man/1/autossh&quot;&gt;autossh&lt;/a&gt;), but a custom service proved to be more stable on my machine. Feel free to use whatever configuration works best for you to keep the connection active.&lt;/p&gt;</content><author><name>F. Javier R. Donado</name><email>jdonado@jdonado.com</email><uri>https://www.jdonado.com</uri></author><category term="cloud self-hosting linux" /><category term="cloud" /><category term="self-hosting" /><category term="linux" /><summary type="html">No one knows what it’s like to be a bad man, to be a sad man… behind a NAT</summary></entry><entry><title type="html">Kubernetes: beyond docker compose</title><link href="https://blog.jdonado.com/kubernetes/" rel="alternate" type="text/html" title="Kubernetes: beyond docker compose" /><published>2018-12-26T00:00:00+01:00</published><updated>2018-12-26T00:00:00+01:00</updated><id>https://blog.jdonado.com/kubernetes</id><content type="html" xml:base="https://blog.jdonado.com/kubernetes/">&lt;h1 id=&quot;beyond-docker-compose&quot;&gt;Beyond docker compose&lt;/h1&gt;

&lt;p&gt;Right after I started using docker to containerize my applications, I used to include a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt; file together with them (sometimes in a separate repository) in order to illustrate how a local deployment could work. With &lt;a href=&quot;https://docs.docker.com/compose/&quot;&gt;docker-compose&lt;/a&gt; you can:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Define which services and applications are necessary to run a specific solution&lt;/li&gt;
  &lt;li&gt;Detail how they may interact with each other&lt;/li&gt;
  &lt;li&gt;Specify in which order they should start&lt;/li&gt;
  &lt;li&gt;Describe the network in which the containers are going to be deployed&lt;/li&gt;
  &lt;li&gt;Setup the environment for everything to work in harmony&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After a while I got used to the simplicity and usefulness of docker compose. However, deploying services with docker compose like this (that is: without &lt;a href=&quot;https://docs.docker.com/engine/swarm/&quot;&gt;swarm mode&lt;/a&gt;) had an important limitation: &lt;strong&gt;you could only deploy to a single machine&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If you have more advanced deployment needs, e.g.:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Deployment of services on a cluster with various nodes&lt;/li&gt;
  &lt;li&gt;Need of a scaling strategy&lt;/li&gt;
  &lt;li&gt;Coordinate updates with zero-downtime deployment&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;then you need a container orchestrator. There are a number of solutions for orchestration of containers in the cloud: Docker Swarm, Kubernetes, Apache Mesos, CloudFoundry’s Diego…&lt;/p&gt;

&lt;p&gt;Depending on your needs, the right tool might vary. For me, Kubernetes seemed like a very good compromise between features and ease of use. Some of the reasons why I think it’s a good choice are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It’s perfectly integrated with docker. If you’re already using docker containers, then you’re halfway there&lt;/li&gt;
  &lt;li&gt;It is open source. That means (among other things) that you’re not attached to a specific provider. There are currently a number of providers of Kubernetes as a service in the cloud and you’re always free to deploy Kubernetes clusters yourself on whichever your cloud infrastructure is&lt;/li&gt;
  &lt;li&gt;The &lt;a href=&quot;https://kubernetes.io/docs/home/?path=users&amp;amp;persona=app-developer&amp;amp;level=foundational&quot;&gt;documentation&lt;/a&gt; is very good&lt;/li&gt;
  &lt;li&gt;It’s currently &lt;a href=&quot;https://thenewstack.io/data-says-kubernetes-deployment-patterns/&quot;&gt;by far the most popular&lt;/a&gt; container orchestration technology. If you have any problem, there’s a good chance that you’ll find help on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/kubernetes&quot;&gt;StackOverflow&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;You can install minikube on your machine and test your complete solution even before it reaches the cloud. If something goes wrong, you can try to find out what’s happening directly on your machine without having to wait for things to upload and deploy to the cloud&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For me this last point is a game changer as compared to other cloud technologies. The ability to try and run everything locally makes everything easier. Forget about small changes on a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yml&lt;/code&gt; file and trigger the CI pipelines to (pray and) see if a deployment works. Instead of that just make sure that your configuration is up and running locally on your minikube and chances are everything will work out just like that on the cloud.&lt;/p&gt;

&lt;h2 id=&quot;learn-kubernetes&quot;&gt;Learn Kubernetes&lt;/h2&gt;

&lt;p&gt;If you want to learn Kubernetes, the &lt;a href=&quot;https://kubernetes.io/docs/tutorials/&quot;&gt;tutorials&lt;/a&gt; section of the official Kubernetes website is a great starting point. I myself followed it and then I completed a couple of the &lt;a href=&quot;https://kubernetes.io/docs/tutorials/online-training/overview/&quot;&gt;online training&lt;/a&gt; courses that they link to.&lt;/p&gt;

&lt;p&gt;What follows are the notes I took while learning about it.&lt;/p&gt;

&lt;h1 id=&quot;kubernetes-a-quick-overview-for-developers&quot;&gt;Kubernetes: a quick overview for developers&lt;/h1&gt;

&lt;p&gt;Kubernetes is an open source container orchestrator created by Google and now maintained by the &lt;a href=&quot;https://en.wikipedia.org/wiki/Linux_Foundation#Cloud_Native_Computing_Foundation&quot;&gt;Cloud Native Computing Foundation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Every Kubernetes infrastructure has the following components:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Master: it coordinates all activities in the cluster (scheduling, apps maintenance, scaling, updating…)&lt;/li&gt;
  &lt;li&gt;Nodes: workers that run applications. They have:
    &lt;ul&gt;
      &lt;li&gt;A Kubelet: an agent responsible for communication between the node and the Kubernetes Master (communicating via the Kubernetes API). It manages the pods and the containers running on a machine&lt;/li&gt;
      &lt;li&gt;A container runtime, such as docker or rkt, responsible for pulling container images, unpacking the container and running an application&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The minimum of nodes in a production infrastructure is 3.&lt;/p&gt;

&lt;p&gt;You can run Kubernetes locally on your machine by installing &lt;strong&gt;minikube&lt;/strong&gt;. Minikube is a lightweight Kubernetes implementation that creates a VM on your local machine and deploys a simple cluster containing only one node.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Kubectl&lt;/strong&gt; is the Kubernetes CLI, that uses the Kubernetes API in order to interact with the cluster. You can use it to connect to your minikube and handle your deployments locally, and you can also connect to your cloud provider and handle your deployments remotely. It is kind of an equivalent to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker&lt;/code&gt; command for docker.&lt;/p&gt;

&lt;p&gt;In order to deploy an application in Kubernetes, you can define a deployment configuration in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yml&lt;/code&gt; (preferred) or in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;json&lt;/code&gt; file. A deployment configuration instructs Kubernetes how to create and update instances of an application. The Kubernetes Deployment Controller (KDC) makes sure that the instances are up an running. NOTE: my next blog post will show a simple example of a microservices deployment in kubernetes. Here I will continue defining the basic concepts and commands for future quick reference.&lt;/p&gt;

&lt;p&gt;In case a node goes down, the KDC will start the required containers in the remaining working nodes (self-healing mechanism).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pods&lt;/strong&gt; are the smallest deployable units of computing that can be created and managed in Kubernetes. Pods are in an private, isolated network. They are visible from other pods and services within the same cluster, but not from outside. A pod is an abstraction that represents a group of one or more containers and some shared resources for those containers, such as volumes, networking and container specific information (image version or ports).&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;There’s one IP per pod&lt;/li&gt;
  &lt;li&gt;Pods share namespaces&lt;/li&gt;
  &lt;li&gt;Pods may have one or more containers and volumes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A &lt;strong&gt;service&lt;/strong&gt; defines a logical set of pods and a policy to determine how to access them. It is defined by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yaml&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;json&lt;/code&gt;. Services allow applications to receive traffic. You can define the following types of services (in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type&lt;/code&gt; field of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yaml&lt;/code&gt; file):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;ClusterIP&lt;/strong&gt; (default): it makes the service only reachable within the cluster.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;NodePort&lt;/strong&gt;: it exposes the service on the same port of each selected node in the cluster using NAT, making thus the service accessible from outide the cluster via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;NodeIP&amp;gt;:&amp;lt;NodePort&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;LoadBalancer&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ExternalName&lt;/strong&gt;: it exposes the service using an arbitrary name via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;externalName&lt;/code&gt; by returning a CNAME record. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kube-dns&lt;/code&gt; v1.7 or higher is required.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A service routes traffic across a set of Pods. They allow pods to die and replicate without impacting the application. Kubernetes Services handle discovery and routing. In order to match a set of pods, services use labels and selectors.&lt;/p&gt;

&lt;p&gt;In this image you can see a representation of the aforementioned elements: nodes, pods, services and how they relate to each other.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://blog.jdonado.com/assets/images/pods-nodes-services.png&quot; alt=&quot;Architecture Diagram&quot; title=&quot;Architecture Diagram&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;kubectl-quick-reference&quot;&gt;Kubectl quick reference&lt;/h2&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Note: each line is a specific example&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Don't copy paste this on the terminal!!&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Create a proxy that forwards communications into the cluster-wide&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# private network.&lt;/span&gt;
kubectl proxy

&lt;span class=&quot;c&quot;&gt;# Save the current pod name in an environment variable&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# and access it through the proxy&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;POD_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;kubectl get pods &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; go-template &lt;span class=&quot;nt&quot;&gt;--template&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{ {range .items} } { {.metadata.name} } { {&quot;\n&quot;} } { {end} }'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Test the pod access via proxy&lt;/span&gt;
curl http://localhost:8001/api/v1/namespaces/default/pods/&lt;span class=&quot;nv&quot;&gt;$POD_NAME&lt;/span&gt;/proxy/

&lt;span class=&quot;c&quot;&gt;# Minikube&lt;/span&gt;
minikube version
minikube start

&lt;span class=&quot;c&quot;&gt;# Deploy a dashboard&lt;/span&gt;
kubectl apply &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; https://raw.githubusercontent.com/kubernetes/dashboard/master/src/deploy/recommended/kubernetes-dashboard.yaml
kubectl proxy
kubectl create serviceaccount cluster-admin-dashboard-sa
kubectl create clusterrolebinding cluster-admin-dashboard-sa &lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;n  &lt;span class=&quot;nt&quot;&gt;--clusterrole&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;cluster-admin &lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;n  &lt;span class=&quot;nt&quot;&gt;--serviceaccount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;default:cluster-admin-dashboard-sa

&lt;span class=&quot;c&quot;&gt;# Get secret to connect to the dashboard&lt;/span&gt;
kubectl get secret | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;cluster-admin-dashboard-sa
kubectl describe secret cluster-admin-dashboard-sa-token-sblqz

&lt;span class=&quot;c&quot;&gt;# Run a new image / create a new deployment&lt;/span&gt;
kubectl run nginx &lt;span class=&quot;nt&quot;&gt;--image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;nginx:1.10.0 &lt;span class=&quot;c&quot;&gt;# deploy nginx&lt;/span&gt;
kubectl run kubernetes-bootcamp &lt;span class=&quot;nt&quot;&gt;--image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;gcr.io/google-samples/kubernetes-bootcamp:v1 &lt;span class=&quot;nt&quot;&gt;--port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;8080

&lt;span class=&quot;c&quot;&gt;# Apply whatever it is described in a file (deployment, service, secret...)&lt;/span&gt;
kubectl apply &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; your-file.yml

&lt;span class=&quot;c&quot;&gt;# Delete&lt;/span&gt;
kubectl delete &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; your-file.yml
kubectl delete service &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;some-app &lt;span class=&quot;c&quot;&gt;# Remove services labeled with `run=some-app`&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Get information&lt;/span&gt;
kubectl version
kubectl cluster-info
kubectl get &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;all|nodes|pods|deployments|services|replicasets]
kubectl describe pods nginx-68c5b54745-hxn8r
kubectl logs nginx-68c5b54745-hxn8r &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Expose a deployment&lt;/span&gt;
kubectl expose deployments nginx &lt;span class=&quot;nt&quot;&gt;--port&lt;/span&gt; 80 &lt;span class=&quot;nt&quot;&gt;--type&lt;/span&gt; LoadBalancer

&lt;span class=&quot;c&quot;&gt;# Forward ports&lt;/span&gt;
kubectl port-forward nginx-68c5b54745-hxn8r 10080:80

&lt;span class=&quot;c&quot;&gt;# Label&lt;/span&gt;
kubectl label pod &lt;span class=&quot;nv&quot;&gt;$POD_NAME&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;v1 &lt;span class=&quot;c&quot;&gt;# Add the label `app=v1` to the pod `$POD_NAME`&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Scale&lt;/span&gt;
kubectl scale deployments/kubernetes-bootcamp &lt;span class=&quot;nt&quot;&gt;--replicas&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;4

&lt;span class=&quot;c&quot;&gt;# Update/Rollback and undo&lt;/span&gt;
kubecel &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;image deployments/your-app&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;you/your-app:v2
kubectl rollout status deployments/your-app
kubectl rollout undo deployments/your-app

&lt;span class=&quot;c&quot;&gt;# Execute commands on a container in a pod&lt;/span&gt;
kubectl &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;nginx-68c5b54745-hxn8r &lt;span class=&quot;nt&quot;&gt;--stdin&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--tty&lt;/span&gt; /bin/sh

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>F. Javier R. Donado</name><email>jdonado@jdonado.com</email><uri>https://www.jdonado.com</uri></author><category term="cloud" /><category term="kubernetes" /><category term="docker" /><category term="docker-compose" /><category term="linux" /><summary type="html">Beyond docker compose</summary></entry><entry><title type="html">CMD Magic</title><link href="https://blog.jdonado.com/cmd-magic/" rel="alternate" type="text/html" title="CMD Magic" /><published>2018-07-06T00:00:00+02:00</published><updated>2018-07-06T00:00:00+02:00</updated><id>https://blog.jdonado.com/cmd-magic</id><content type="html" xml:base="https://blog.jdonado.com/cmd-magic/">&lt;h1 id=&quot;command-line-magic&quot;&gt;Command Line Magic&lt;/h1&gt;

&lt;p&gt;Last year I published &lt;a href=&quot;/vim-magic/&quot;&gt;Vim Magic&lt;/a&gt;, where I gathered all the commands that I found particularly useful when using the Vim editor. I’ve kept updating it ever since whenever I’ve found new useful tricks. It’s been so far helpful to me as a reference and hopefully to somebody else out there too. This post is the same but for the command line in Linux/Unix.&lt;/p&gt;

&lt;p&gt;This is not intended to be a tutorial with the basics for you to learn how to use the command line. Instead, it’s more like a reference for somebody who’s been using the terminal for some time now and wants to learn some new tricks or remember older ones.&lt;/p&gt;

&lt;h2 id=&quot;scripts&quot;&gt;Scripts&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#!/bin/bash&lt;/code&gt; use this as the first line of a bash script, for the interpreter to know how to handle it&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;files&quot;&gt;Files&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;for i in *.png ; do convert &quot;$i&quot; &quot;${i%.*}.jpg&quot; ; done&lt;/code&gt; convert all &lt;strong&gt;png&lt;/strong&gt; files into &lt;strong&gt;jpg&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;find . -type f -exec grep -El &quot;someWord|someOtherWord&quot; {} \;&lt;/code&gt; find all files in the current directory (and above) that contain &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;someWord&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;someOtherWord&lt;/code&gt;. An escaped semicolon is necessary to indicate the end of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exec&lt;/code&gt;. The brackets are also necessary, since they contain the output of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;find&lt;/code&gt; command, that will be fed into the grep command&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;find . -type f | xargs grep -El &quot;something|appstore&quot;&lt;/code&gt; exactly the same as the previous command, using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xargs&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-exec&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;find /path/to/files* -mtime +5 -exec rm {} \;&lt;/code&gt; delete files older than 5 days&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;find . -name  '*.zip' -exec unzip {} \;&lt;/code&gt; unzip all the zip files in the current directory&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;find . -type d | egrep -o '.*src$'&lt;/code&gt; find &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src&lt;/code&gt; directories and none of their subdirectories&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;find . 2&amp;gt;/dev/null&lt;/code&gt; find without showing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;permission denied&lt;/code&gt; messages&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wdiff one.txt two.txt | colordiff&lt;/code&gt; color the differences between &lt;strong&gt;one.txt&lt;/strong&gt; and &lt;strong&gt;two.txt&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;diff -rq(w) dir1 dir2&lt;/code&gt; compare two directory structures&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SOME_FILE=$(&amp;lt;some-file.txt)&lt;/code&gt; load the contents of &lt;strong&gt;some-file.txt&lt;/strong&gt; into the variable &lt;strong&gt;SOME_FILE&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cat oldfile.txt | tr -d '\n' &amp;gt; newfile.txt&lt;/code&gt; create newfile.txt as a copy of oldfile where all newlines have been removed&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;convert file.{jpg,png}&lt;/code&gt; equivalent to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;convert file.jpg file.png&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xargs&lt;/code&gt; you can avoid loops (it passes the stdout as input to the specified command):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;find . -name *.png | xargs rm -rf&lt;/code&gt; remove recursively all png files&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git branch --merged | grep -v \* | xargs git branch -D&lt;/code&gt; remove all local git branches that have already been merged&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;users-and-groups&quot;&gt;Users and Groups&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cat /etc/passwd | cut -d: -f1&lt;/code&gt; list all users&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cat /etc/group | cut -d: -f1&lt;/code&gt; list all groups&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chown user file&lt;/code&gt; change the owner of a file&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chgrp group file&lt;/code&gt; change the group of a file&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chown user:group file&lt;/code&gt; change the owner and group of a file&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;networking-and-ssh&quot;&gt;Networking and SSH&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lsof -nP | grep 9092&lt;/code&gt; show which process is blocking the port 9092&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rsync -avz --remove-source-files -e ssh /local/dir remoteuser@remotehost:/remote/dir&lt;/code&gt; SSH copy files and remove source&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh user@your-server.com -L 2000:25&lt;/code&gt; SSH session and port tunneling&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh -Y user@your-server.com&lt;/code&gt; start an xterm&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo route delete default gw 10.0.2.2 eth0&lt;/code&gt; remove the default gateway on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eth0&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo route add default gw 192.168.1.254 eth0&lt;/code&gt; add the default gateway on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eth0&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wget -c -t 0 --timeout=60 --waitretry=60 --read-timeout=10 http://example.com/file.mkv&lt;/code&gt; download the file using the partially downloaded file (resume &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-c&lt;/code&gt;) retrying ad infinitum (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-t 0&lt;/code&gt;), with 60s timeout and 60s wait between attempts, resetting the connection if there’s no activity in 10 seconds (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--read-timeout=10&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wget -r -np -nH -R index.html http://hostname/aaa/bbb/ccc/ddd/&lt;/code&gt; download all files and subfolders of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ddd&lt;/code&gt; directory, recursively (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-r&lt;/code&gt;), without going to upper directories (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-np&lt;/code&gt;), not saving to the hostname folder (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-nH&lt;/code&gt;), exclude &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.html&lt;/code&gt; files (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-r index.html&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;random-magic&quot;&gt;Random Magic&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;ctrl&amp;gt;+r&lt;/code&gt; reverse search: in order to search for a command you previously used&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cal&lt;/code&gt; print the current month&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo apt-get install build-essential checkinstall&lt;/code&gt; in debian-based distros, install the essentials for building packages (make; make install)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;openssl base64 -in input.txt -out encoded.b64&lt;/code&gt; encode &lt;strong&gt;input.txt&lt;/strong&gt; in base64 and save it to the file &lt;strong&gt;encoded.b64&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo !!&lt;/code&gt; run the last command with sudo&lt;/li&gt;
  &lt;li&gt;` `+any command: it won’t go to the history&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$( command )&lt;/code&gt; it gives the output of command&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;service --status-all&lt;/code&gt; status of services&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;echo &quot;hello world&quot; | sed -e &quot;s/e/o/g&quot; | sed -e &quot;s/lo/a/g&quot; | sed -e &quot;s/world/mundo/g&quot;&lt;/code&gt; translate “hello world” to spanish&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker ps | awk '{print $8}'&lt;/code&gt; print only the names of the current containers&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;remote-ssh-session-without-a-password&quot;&gt;Remote SSH session without a password&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh-keygen -t rsa -b 2048&lt;/code&gt; # Generate an rsa key pair&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh-copy-id youruser@yourserver&lt;/code&gt; # Authorize your key in the remote server&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh youruser@yourserver&lt;/code&gt; # Login without entering a password&lt;/li&gt;
&lt;/ul&gt;</content><author><name>F. Javier R. Donado</name><email>jdonado@jdonado.com</email><uri>https://www.jdonado.com</uri></author><category term="command-line" /><category term="linux" /><category term="command-line" /><category term="shell" /><category term="macosx" /><summary type="html">Command Line Magic</summary></entry><entry><title type="html">ReasonML</title><link href="https://blog.jdonado.com/reasonml/" rel="alternate" type="text/html" title="ReasonML" /><published>2018-05-26T00:00:00+02:00</published><updated>2018-05-26T00:00:00+02:00</updated><id>https://blog.jdonado.com/reasonml</id><content type="html" xml:base="https://blog.jdonado.com/reasonml/">&lt;h1 id=&quot;reasonml-programming-language&quot;&gt;ReasonML Programming Language&lt;/h1&gt;

&lt;h2 id=&quot;what-is-reasonml-where-does-it-come-from-what-can-i-do-with-it&quot;&gt;What is ReasonML? Where does it come from? What can I do with it?&lt;/h2&gt;

&lt;p&gt;ReasonML is an object-functional programming language that provides a different syntax for writing &lt;a href=&quot;https://ocaml.org/&quot;&gt;OCaml&lt;/a&gt; code and can be transpiled into JavaScript code using &lt;a href=&quot;https://bucklescript.github.io/&quot;&gt;BuckleScript&lt;/a&gt;. A comparison between OCaml and ReasonML can be found on &lt;a href=&quot;https://reasonml.github.io/docs/en/comparison-to-ocaml.html&quot;&gt;ReasonML’s official documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The ReasonML programming language was created at Facebook and I found out about it thanks to &lt;a href=&quot;https://twitter.com/nikgraf&quot;&gt;Nick Graf&lt;/a&gt;’s Egghead course &lt;a href=&quot;https://egghead.io/courses/get-started-with-reason&quot;&gt;Get Started with Reason&lt;/a&gt;. I started taking notes while watching the course and I ended up with this post (so thank him for the code examples).&lt;/p&gt;

&lt;p&gt;If you want to know more about the language, Dr. Axel Rauschmayer has written a wonderful book about it that you can read online for free: &lt;a href=&quot;http://reasonmlhub.com/exploring-reasonml/&quot;&gt;Exploring ReasonML and functional programming&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;what-i-like-and-dislike-so-far&quot;&gt;What I Like and Dislike so Far&lt;/h2&gt;

&lt;p&gt;I like…&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Inferred types&lt;/li&gt;
  &lt;li&gt;The possibility of creating custom types and variants&lt;/li&gt;
  &lt;li&gt;The compiler warns you if your switches are not exhaustive (if you’re forgetting cases)&lt;/li&gt;
  &lt;li&gt;Code suggestions underneath the command line are cool&lt;/li&gt;
  &lt;li&gt;Compatibility with JS and OCaml&lt;/li&gt;
  &lt;li&gt;Lexical scoping&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;If&lt;/code&gt; is an expression that can be evaluated into a value (in other languages it is only an statement)&lt;/li&gt;
  &lt;li&gt;Syntax of switch expressions&lt;/li&gt;
  &lt;li&gt;Objects (or records) defined in a similar way as in TypeScript&lt;/li&gt;
  &lt;li&gt;Destructuring objects (records) in a similar way as in JavaScript&lt;/li&gt;
  &lt;li&gt;Spread operator as in JavaScript&lt;/li&gt;
  &lt;li&gt;Combinations of variants with switch expressions are great&lt;/li&gt;
  &lt;li&gt;You can match specific cases in a switch&lt;/li&gt;
  &lt;li&gt;There’s no null: variants None and Some can be used instead&lt;/li&gt;
  &lt;li&gt;You can partially apply arguments in functions (automatic currying)&lt;/li&gt;
  &lt;li&gt;Labeled parameters (you can apply then in any order you want)&lt;/li&gt;
  &lt;li&gt;Optional parameters&lt;/li&gt;
  &lt;li&gt;Pipe operator for function composition&lt;/li&gt;
  &lt;li&gt;Nested structures can directly be compared for equality&lt;/li&gt;
  &lt;li&gt;Structural &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;==&lt;/code&gt; and referential equality &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;===&lt;/code&gt; operators&lt;/li&gt;
  &lt;li&gt;Powerful pattern matching&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I dislike…&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Shadowing is allowed (let variables can be redefined)&lt;/li&gt;
  &lt;li&gt;Operator ++ for concatenating strings&lt;/li&gt;
  &lt;li&gt;Underscores in the built-in functions’ names&lt;/li&gt;
  &lt;li&gt;Too many semicolons&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;code-examples&quot;&gt;Code Examples&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// this will bind 42 to the name `foo`&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isMorning&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// This binds &quot;Good Morning&quot; to the name `greeting`&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;greeting&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isMorning&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Good Morning&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Hello&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// A switch expression&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;greeting&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stranger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stranger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Teacher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Hey professor&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Director&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Hello director&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Richard&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Still here Ricky?&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;anyOtherName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Hey, &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;anyOtherName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;unknown&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// A person type definition&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;mutable&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;mood&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// mood is the only mutable field in this type&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// A record of type person&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tim&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Tim&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;52&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;mood&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;happy&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Destructuring a person type into variables timsAge and timsName&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;timsAge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;timsName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Custom type answer (tagged union or variant)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;answer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Yes&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;No&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Maybe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Further assignments automatically infer the type&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isItRaining&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Maybe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// It infers type `answer`&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// You can define functions like this (in this case, types are optional, since they&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// can be inferred&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// A function with labelled and optional parameters&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Defaultname&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;middleName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;middleName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;firstName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lastName&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;firstName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lastName&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Pipe operators example: find the largest element smaller than 4&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rev&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Recursive functions (without rec, the function cannot call itself)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;countBack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;print_int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;countBack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// There are tuples too (unlike lists, they can contain elements of different types)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;this is&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;tuple&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;of four elements&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// And there are arrays. Unlike lists, they're mutable&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// A pattern matching example&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;print_endline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;a, b and something&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;print_endline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;something and &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;print_endline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;An Array&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Example Math module&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.1415&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Then access everything using dot notation&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Returns 3.1415&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name>F. Javier R. Donado</name><email>jdonado@jdonado.com</email><uri>https://www.jdonado.com</uri></author><category term="programming-language" /><category term="functional-programming" /><category term="programming-language" /><category term="javascript" /><category term="ocaml" /><category term="reasonml" /><summary type="html">ReasonML Programming Language</summary></entry><entry><title type="html">Lifescope Project</title><link href="https://blog.jdonado.com/lifescope-project/" rel="alternate" type="text/html" title="Lifescope Project" /><published>2017-09-27T00:00:00+02:00</published><updated>2017-09-27T00:00:00+02:00</updated><id>https://blog.jdonado.com/lifescope-project</id><content type="html" xml:base="https://blog.jdonado.com/lifescope-project/">&lt;h1 id=&quot;an-artificial-intelligence-software-looking-for-solutions-to-healthcare-problems&quot;&gt;An artificial intelligence software looking for solutions to healthcare problems&lt;/h1&gt;

&lt;h2 id=&quot;some-history&quot;&gt;Some history&lt;/h2&gt;

&lt;p&gt;At some point in March 2017, my friend &lt;a href=&quot;https://www.linkedin.com/in/juanff/&quot;&gt;Juan Fernández&lt;/a&gt; proposed me to join him in the development of a software he’s been working on as a side project. It was a script written in Python that used &lt;a href=&quot;https://spacy.io/&quot;&gt;spaCy&lt;/a&gt; to analyze messages coming from a twitter stream.&lt;/p&gt;

&lt;p&gt;The idea was to use the &lt;a href=&quot;https://en.wikipedia.org/wiki/Natural_language_processing&quot;&gt;Natural Language Processing (NLP)&lt;/a&gt; engine of &lt;a href=&quot;https://spacy.io/&quot;&gt;spaCy&lt;/a&gt; to find messages in English where a solution is proposed to a healthcare problem, tagging both problem and solution, and discarding irrelevant messages.&lt;/p&gt;

&lt;p&gt;The script also analyzed the author of each message, tagging it automatically (e.g.: doctor, news source, patient…).&lt;/p&gt;

&lt;p&gt;He had a first version of the script working on his computer, but he wanted to find a way to show it to the world. So I thought we could turn it into an online web application accessible for everyone and make everything Open Source. Now, the first version of our software is available online at &lt;a href=&quot;https://lifescope.jdonado.com&quot;&gt;https://www.lifescope-project.com&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;architecture&quot;&gt;Architecture&lt;/h2&gt;

&lt;h3 id=&quot;from-local-script-to-the-cloud&quot;&gt;From local script to the cloud&lt;/h3&gt;

&lt;p&gt;After some playing around with Flask, I decided that separating the analyzer from the twitter stream and the backend services was the best solution. We wanted a system that &lt;strong&gt;scales&lt;/strong&gt; and that is &lt;strong&gt;easily maintainable&lt;/strong&gt;. So I came about with the following &lt;strong&gt;microservices&lt;/strong&gt; based architecture:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mrdonado/health-nlp-node&quot;&gt;A nodeJS service&lt;/a&gt;, sending messages from the twitter stream to a &lt;a href=&quot;http://kr.github.io/beanstalkd/&quot;&gt;beanstalkd&lt;/a&gt; jobs queue.&lt;/li&gt;
  &lt;li&gt;The &lt;a href=&quot;https://github.com/mrdonado/health-nlp-analysis&quot;&gt;python analysis engine&lt;/a&gt;, which now just takes jobs from beanstalkd and sends the results to Firebase and &lt;a href=&quot;https://www.elastic.co/products/elasticsearch&quot;&gt;Elasticsearch&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://firebase.google.com&quot;&gt;Firebase DB&lt;/a&gt;, serving the analyzed messages in real time to the frontend.&lt;/li&gt;
  &lt;li&gt;A &lt;a href=&quot;https://github.com/mrdonado/health-nlp-react&quot;&gt;ReactJS + Redux&lt;/a&gt; based frontend, that works as a showcase for the project, with an introduction, a link to &lt;a href=&quot;http://lifescope-insights.jdonado.com/&quot;&gt;the project’s blog&lt;/a&gt;, and a real time timeline of analyzed messages.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://blog.jdonado.com/assets/images/lifescope-architecture.png&quot; alt=&quot;Architecture Diagram&quot; title=&quot;Architecture Diagram&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;features&quot;&gt;Features&lt;/h2&gt;

&lt;p&gt;With this architecture, we can show the results of the analysis in &lt;strong&gt;real time&lt;/strong&gt;, while they are also saved permanently into the Elasticsearch in order to ease the integration with an &lt;strong&gt;upcoming statistics module&lt;/strong&gt;. Firebase takes care of the websockets; so, our services just need to respond to on-demand requests, making scalability less demanding. We clean the Firebase DB from older messages every three hours, so that it loads quickly. Thus, the free plan with 2GB of storage is more than enough for our needs.&lt;/p&gt;

&lt;p&gt;The analysis engine is now independent of the source: it just processes jobs that come from beanstalkd with a generic JSON format. We can (and we will) extend the streaming services in order to provide more sources, other than twitter (e.g.: specialized news feeds).&lt;/p&gt;

&lt;p&gt;The nodeJS service also has an endpoint to which the frontend can post new messages, so that our visitors can test the analysis engine and see the results right away on the timeline.&lt;/p&gt;

&lt;h2 id=&quot;deployment&quot;&gt;Deployment&lt;/h2&gt;

&lt;p&gt;Everything is &lt;a href=&quot;https://www.docker.com/&quot;&gt;dockerized&lt;/a&gt;, making the installation and deployment of the whole system a piece of cake, allowing us to easily move our services if the demand grows. We deployed it to a &lt;a href=&quot;https://en.wikipedia.org/wiki/Virtual_private_server&quot;&gt;VPS&lt;/a&gt; and it’s working 24/7, creating an interesting database to analyze using &lt;a href=&quot;https://en.wikipedia.org/wiki/Big_data&quot;&gt;Big Data&lt;/a&gt; tools.&lt;/p&gt;

&lt;h2 id=&quot;and-why-did-you&quot;&gt;And why did you…&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Use &lt;a href=&quot;https://facebook.github.io/react/&quot;&gt;React&lt;/a&gt; and &lt;a href=&quot;http://redux.js.org/&quot;&gt;Redux&lt;/a&gt; for such a simple frontend? Side projects are for me a chance to experiment with technologies I’m still no expert with. I started writing it with &lt;a href=&quot;https://github.com/mrdonado/health-nlp-frontend&quot;&gt;Angular&lt;/a&gt;, but since I already had other active projects that used Angular, I decided to rewrite it using React and Redux, because I like to use the time I spend on my side projects to learn new interesting stuff I don’t always use on my day job. Maybe just React would’ve been enough, but anyway, if the frontend grows into something more complex (which is quite likely), its scalability will be easier.&lt;/li&gt;
  &lt;li&gt;Use a VPS instead of deploying it to &lt;a href=&quot;https://aws.amazon.com&quot;&gt;AWS&lt;/a&gt;? A VPS is really cheap, and for this first phase is more than enough for our needs. Also, we’re not afraid to maintain ourselves a couple of Linux machines :)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;further-steps&quot;&gt;Further steps&lt;/h2&gt;

&lt;p&gt;Now it’s time to take advantage of the information saved in the Elasticsearch. The next step is to build a new backend service (most likely, &lt;a href=&quot;https://clojure.org/&quot;&gt;Clojure&lt;/a&gt; based) that provides the frontend with results of a &lt;strong&gt;Big Data&lt;/strong&gt; analysis. &lt;a href=&quot;https://d3js.org/&quot;&gt;D3js&lt;/a&gt; will for certain be a useful tool in order to plot that data on the frontend.&lt;/p&gt;

&lt;p&gt;Do you have any questions or remarks? Feel free to ask us anything on the comments section.&lt;/p&gt;</content><author><name>F. Javier R. Donado</name><email>jdonado@jdonado.com</email><uri>https://www.jdonado.com</uri></author><category term="projects" /><category term="python" /><category term="ai" /><category term="nlp" /><category term="nodejs" /><category term="docker" /><category term="architecture" /><category term="reactjs" /><category term="redux" /><summary type="html">An artificial intelligence software looking for solutions to healthcare problems</summary></entry><entry><title type="html">Useful npm commands</title><link href="https://blog.jdonado.com/useful-npm-commands/" rel="alternate" type="text/html" title="Useful npm commands" /><published>2017-06-18T00:00:00+02:00</published><updated>2017-06-18T00:00:00+02:00</updated><id>https://blog.jdonado.com/useful-npm-commands</id><content type="html" xml:base="https://blog.jdonado.com/useful-npm-commands/">&lt;h1 id=&quot;quick-reference-of-some-useful-commands&quot;&gt;Quick reference of some useful commands&lt;/h1&gt;

&lt;h2 id=&quot;avoid-conflicts&quot;&gt;Avoid conflicts&lt;/h2&gt;

&lt;p&gt;If you’ve been using nodeJS npm package manager, chances are, sooner or later you will get conflicts within your dependencies. Maybe you’re cloning an old project or maybe you just updated your environment and your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;node_modules&lt;/code&gt; folder must be regenerated.&lt;/p&gt;

&lt;p&gt;Sometimes after running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm install&lt;/code&gt; you don’t get exactly the modules that you need and suddenly things don’t work as expected anymore.&lt;/p&gt;

&lt;p&gt;This might happen when there’s &lt;a href=&quot;https://docs.npmjs.com/misc/semver&quot;&gt;no specific version&lt;/a&gt; defined of some dependencies in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;package.json&lt;/code&gt;, but rather an approximate one (e.g.: using a tilde, as in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~1.2.3&lt;/code&gt; or a caret, as in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;^1.2.3&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;While tildes and carets can be useful if you want to automatically use more recent versions when available, they can sometimes break your project if anything new isn’t compatible with your current code.&lt;/p&gt;

&lt;p&gt;By just specifying a version number without carets and tildes (as in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1.2.3&lt;/code&gt;), you fix the specific version of each dependency you need.&lt;/p&gt;

&lt;h3 id=&quot;lock-down-dependency-versions&quot;&gt;Lock down dependency versions&lt;/h3&gt;

&lt;p&gt;Sometimes using specific module versions is not enough. Saving a list with the specific versions of all your dependencies might save your day.&lt;/p&gt;

&lt;p&gt;Use the &lt;a href=&quot;https://docs.npmjs.com/cli/shrinkwrap&quot;&gt;npm-shrinkwrap&lt;/a&gt; command in order to create an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm-shrinkwrap.json&lt;/code&gt; file that &lt;a href=&quot;https://docs.npmjs.com/files/package-locks&quot;&gt;locks&lt;/a&gt; all the npm dependencies:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm shrinkwrap&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Another (even better) alternative is to use &lt;a href=&quot;https://yarnpkg.com/en/docs/yarn-lock&quot;&gt;Yarn&lt;/a&gt; to create a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yarn.lock&lt;/code&gt; file, which has the same goal as the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm-shrinkwrap.json&lt;/code&gt;, but it seems to follow a more deterministic approach, being therefore safer.&lt;/p&gt;

&lt;p&gt;Yarn is compatible with the same &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;package.json&lt;/code&gt; of npm, so you can just install it globally (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm install -g yarn&lt;/code&gt;) and try it out right away by simply running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yarn&lt;/code&gt; on your project’s root folder, which will generate the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yarn.lock&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It is a very good idea to add this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yarn.lock&lt;/code&gt; to your version control.&lt;/p&gt;

&lt;h2 id=&quot;remove-unneeded-dependencies&quot;&gt;Remove unneeded dependencies&lt;/h2&gt;

&lt;p&gt;If you want to remove modules from your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;node_modules&lt;/code&gt; directory that you once installed, but that are not required anymore by your project, you can use &lt;a href=&quot;https://docs.npmjs.com/cli/prune&quot;&gt;prune&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm prune&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm prune --production&lt;/code&gt; will also remove the &lt;em&gt;devDependencies&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This is particularly useful before running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm shrinkwrap&lt;/code&gt; if you manually removed dependencies from your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;package.json&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;list-outdated-dependencies&quot;&gt;List outdated dependencies&lt;/h2&gt;

&lt;p&gt;If you want to check out which dependencies within your project are outdated, you can use the &lt;a href=&quot;https://docs.npmjs.com/cli/outdated&quot;&gt;npm-outdated&lt;/a&gt; command:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm outdated&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;update-dependencies&quot;&gt;Update dependencies&lt;/h2&gt;

&lt;p&gt;With the module &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm-check-updates&lt;/code&gt;, you can automatically update your dependencies to the latest versions (be careful when doing this, since modifying various depencencies at once might break things down).&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm i -g npm-check-updates&lt;/code&gt; Install the &lt;a href=&quot;https://www.npmjs.com/package/npm-check-updates&quot;&gt;npm-check-updates&lt;/a&gt; module globally&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm-check-updates -u&lt;/code&gt; the option -u upgrades your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;package.json&lt;/code&gt; automatically&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm install&lt;/code&gt; in order to install the new versions of the dependencies (you might need to remove the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;node_modules&lt;/code&gt; directory first)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;some-other-useful-commands&quot;&gt;Some other useful commands&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm ls&lt;/code&gt; list the installed packages&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm dedupe&lt;/code&gt; reduce duplication&lt;/li&gt;
&lt;/ul&gt;</content><author><name>F. Javier R. Donado</name><email>jdonado@jdonado.com</email><uri>https://www.jdonado.com</uri></author><category term="vim" /><category term="npm" /><category term="nodejs" /><summary type="html">Quick reference of some useful commands</summary></entry><entry><title type="html">Vim magic</title><link href="https://blog.jdonado.com/vim-magic/" rel="alternate" type="text/html" title="Vim magic" /><published>2017-05-28T00:00:00+02:00</published><updated>2017-05-28T00:00:00+02:00</updated><id>https://blog.jdonado.com/vim-magic</id><content type="html" xml:base="https://blog.jdonado.com/vim-magic/">&lt;h1 id=&quot;vim-magic&quot;&gt;Vim magic&lt;/h1&gt;

&lt;p&gt;I’ve been using the &lt;a href=&quot;http://www.vim.org&quot;&gt;vim editor&lt;/a&gt; for a while now, and I really like it.
But it’s true that the learning curve is very steep. There are so many options, that even
after years of using it, you can still discover lots of new tricks.&lt;/p&gt;

&lt;p&gt;This is a compilation of my favorite commands. I will keep updating this post in the future
whenever I discover new interesting stuff (this is kind of a personal quick reference).&lt;/p&gt;

&lt;h2 id=&quot;in-normal-mode&quot;&gt;In normal mode&lt;/h2&gt;

&lt;h3 id=&quot;edition-magic&quot;&gt;Edition magic&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vi&quot;&lt;/code&gt; Select everything &lt;em&gt;inside&lt;/em&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;&lt;/code&gt;. It also works with parenthesis, brackets, tags…&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;di&quot;&lt;/code&gt; Delete everything &lt;em&gt;inside&lt;/em&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;&lt;/code&gt;. Same as before.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;da&quot;&lt;/code&gt; Delete everything &lt;em&gt;inside&lt;/em&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;&lt;/code&gt;, including the surrounding &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CTRL+v&lt;/code&gt; Start visual mode, selecting columns&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;=&amp;lt;next position&amp;gt;&lt;/code&gt; Indent&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zz&lt;/code&gt; Scroll the current line to the center of the window&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zt&lt;/code&gt; Scroll the current line to the top of the window&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zb&lt;/code&gt; Scroll the current line to the bottom of the window&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cs&quot;'&lt;/code&gt; Change the surrounding double quotes by simple quotes
(&lt;a href=&quot;http://www.vim.org/scripts/script.php?script_id=1697&quot;&gt;surround.vim&lt;/a&gt; is required)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/\csearchString&lt;/code&gt; Perform a case insensitive search&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/\CsearchString&lt;/code&gt; Perform a case sensitive search&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;marks&quot;&gt;Marks&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mk&lt;/code&gt; mark the current position as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;k&lt;/code&gt; (any other lowercase letter will do)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mK&lt;/code&gt; mark the current position as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;K&lt;/code&gt;. Uppercase means that it is a global mark,
and it will be available even if you currently have a different file opened.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'k&lt;/code&gt; jump to the position previously marked as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;k&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;folds&quot;&gt;Folds&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zf'k&lt;/code&gt; fold lines until the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;k&lt;/code&gt; mark&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zo&lt;/code&gt; open the folded code&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zc&lt;/code&gt; close the folded code&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;za&lt;/code&gt; toggle the folded code&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;sessions&quot;&gt;Sessions&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:mks ~/.vim/foo.vim&lt;/code&gt; Save the current vim session&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:source ~/.vim/foo.vim&lt;/code&gt; Restore the previously saved session&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;tabs&quot;&gt;Tabs&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gT&lt;/code&gt; Go to the previous tab&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gt&lt;/code&gt; Go to the next tab&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:tabfind &amp;lt;TAB&amp;gt;&lt;/code&gt; Find a file with autocompletion and open it in a new tab&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;splitting&quot;&gt;Splitting&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vsplit&lt;/code&gt; Split vertically&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;split&lt;/code&gt; Split horizontally&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;other-commands&quot;&gt;Other commands&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:echo $VIM&lt;/code&gt; Show the path to the vimrc configuration file (usually just &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.vimrc&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:!command&lt;/code&gt; Run a unix command&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:!!&lt;/code&gt; Swap the selection by the stdout of the last command&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:e .&lt;/code&gt; Open the file explorer on the current directory, in order to edit a file&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:find *.js &amp;lt;TAB&amp;gt;&lt;/code&gt; Find a file with extension &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.js&lt;/code&gt; using autocompletion&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:b &amp;lt;TAB&amp;gt;&lt;/code&gt; Open a file that has been previously opened (and is still in the buffer)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:ls&lt;/code&gt; List the previously opened files&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:vert diffs otherfile&lt;/code&gt; Diff the current file with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;otherfile&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;in-edit-mode&quot;&gt;In edit mode&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;CTRL&amp;gt;n&lt;/code&gt; Autocomplete&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;custom-settings&quot;&gt;Custom settings&lt;/h2&gt;

&lt;p&gt;These settings can be saved into the vimrc file.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;syntax on&lt;/code&gt; Activate the syntax highlighting&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;set number&lt;/code&gt; Show the line numbers&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;set autoindent&lt;/code&gt; Autoindentation&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;set path+=**&lt;/code&gt; Include subdirectories when finding a file&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;set wildmenu&lt;/code&gt; Menu helper when using tab finding files or directories&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;set nocompatible&lt;/code&gt; Ignore compatibility with ancient vi versions&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;set smartcase&lt;/code&gt; Always perform case insensitive search unless you search for capital letters&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;set wildignore+=**/node_modules/**&lt;/code&gt; Ignore directory when finding files&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;set wrap linebreak nolist&lt;/code&gt; Activate word wrap&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;exporting-your-configuration&quot;&gt;Exporting your configuration&lt;/h2&gt;

&lt;p&gt;You can save your custom vim configuration to a repository and synchronize it with
any other machine.&lt;/p&gt;

&lt;p&gt;In order to do that, just initialize your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.vim&lt;/code&gt; directory as a git repository,
and push it to the cloud (e.g.: to GitHub). You can find &lt;a href=&quot;https://github.com/mrdonado/.vim&quot;&gt;mine here&lt;/a&gt;
(follow the instructions on the README in order to set it up).&lt;/p&gt;

&lt;h2 id=&quot;and-of-course&quot;&gt;…and of course&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:q!&lt;/code&gt; &lt;a href=&quot;https://stackoverflow.blog/2017/05/23/stack-overflow-helping-one-million-developers-exit-vim/&quot;&gt;Don’t get trapped&lt;/a&gt;.
Leave without saving :)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=XA2WjJbmmoM&quot;&gt;How to do 90% of what plugins do (youtube)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=wlR5gYd6um0&quot;&gt;Mastering the vim language (youtube)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=5r6yzFEXajQ&amp;amp;t=310s&quot;&gt;Vim + tmux (youtube)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.vim.org/docs.php&quot;&gt;Vim documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.freecodecamp.org/learn-linux-vim-basic-features-19134461ab85&quot;&gt;Why I love Vim: It’s the lesser known features…&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>F. Javier R. Donado</name><email>jdonado@jdonado.com</email><uri>https://www.jdonado.com</uri></author><category term="vim" /><category term="vim" /><summary type="html">Vim magic</summary></entry><entry><title type="html">Restore clover using Windows</title><link href="https://blog.jdonado.com/restore-clover/" rel="alternate" type="text/html" title="Restore clover using Windows" /><published>2017-05-26T00:00:00+02:00</published><updated>2017-05-26T00:00:00+02:00</updated><id>https://blog.jdonado.com/restore-clover</id><content type="html" xml:base="https://blog.jdonado.com/restore-clover/">&lt;h1 id=&quot;restore-your-configplist&quot;&gt;Restore your config.plist&lt;/h1&gt;

&lt;p&gt;Clover is a boot manager that allows you to select the OS you want to boot with. It is used mostly by Hackintosh users, that is, people that install MacOSX (along with other OSs, like Linux and Windows) on a non-Apple machine.&lt;/p&gt;

&lt;p&gt;The Clover configuration can be quite tricky, and if you’re not lucky you can easily mess it up. That’s why it’s more than advisable to keep a backup of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/EFI/CLOVER/config.plist&lt;/code&gt; configuration file.&lt;/p&gt;

&lt;p&gt;If you happen to break down your MacOSX boot, but you still have a working Windows boot on the same machine, you can follow these steps in order to restore a backup of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config.plist&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Open an administrator console (run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cmd.exe&lt;/code&gt; as Administrator) and type the following:&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;diskpart&lt;/code&gt; (open diskpart)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;list disk&lt;/code&gt; (list your hard drives with)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;select disk 1&lt;/code&gt; (select the disk where your Clover EFI boot has been installed. 1 is just an example)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;list partition&lt;/code&gt; (list the partitions available on the selected disk)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;select partition 1&lt;/code&gt; (select the boot EFI partition)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assign letter=s&lt;/code&gt; (assign a letter. S in this case)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exit&lt;/code&gt; (exit diskpart)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s:&lt;/code&gt; (go to the just mounted boot partition)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cd EFI\CLOVER\&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;copy c:\backups\config.plist .&lt;/code&gt; (c:\backups is just an example. Replace this path by the path where you have your config.plist backup)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If everything worked fine, you can now restart and use your MacOSX boot again.&lt;/p&gt;

&lt;p&gt;In addition to that, some Clover prefixes that can help you find out what went wrong are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-x&lt;/code&gt; start using the safe mode&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-v&lt;/code&gt; verbose mode&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can find more information about Hackintosh and Clover on &lt;a href=&quot;https://www.tonymacx86.com/&quot;&gt;tonymac86&lt;/a&gt;.&lt;/p&gt;</content><author><name>F. Javier R. Donado</name><email>jdonado@jdonado.com</email><uri>https://www.jdonado.com</uri></author><category term="clover" /><category term="hackintosh" /><category term="clover" /><category term="windows" /><summary type="html">Restore your config.plist</summary></entry></feed>